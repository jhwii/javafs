Optional을 사용하여 처리하면, orderRepository.findById(orderId)의 반환값이 Optional<Order> 타입이 되므로, 주문을 찾지 못한 경우에도 예외 대신에 Optional 객체를 반환할 수 있습니다. 이 경우에는 예외를 직접 던지지 않고, 반환된 Optional 객체를 가지고 원하는 처리를 수행할 수 있습니다.

예를 들어, Optional을 사용하여 처리한 코드는 다음과 같을 수 있습니다:

java
Copy code
Optional<Order> orderOptional = orderRepository.findById(orderId);

if (orderOptional.isPresent()) {
    Order order = orderOptional.get();
    // 주문을 찾은 경우에 수행할 로직
} else {
    // 주문을 찾지 못한 경우에 수행할 로직
}



orderOptional.ifPresent(order -> {
    // 주문을 찾은 경우에 수행할 로직
});

if (!orderOptional.isPresent()) {
    // 주문을 찾지 못한 경우에 수행할 로직
}
이 방식은 예외를 사용하지 않고도 Optional 객체의 존재 여부에 따라 다른 동작을 수행할 수 있습니다. 주로 예외를 사용하지 않는 경우에 사용되며, 코드의 가독성을 높일 수 있습니다.
